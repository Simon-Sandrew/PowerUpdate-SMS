from robobrowser import RoboBrowser#function which logs in, grabs raw html, and sends current grades back to main functiondef scrape(username, password):  # this function is designed to get all of the text from the powerschool homepage    br = RoboBrowser()  # assigns a BR opener    br.open('https://powerschool.westportps.org/guardian/home.html')  # opens powerschool    login_fields = br.get_form()  # detects the login fields on the page    login_fields['username'] = username  # inputs username    login_fields['password'] = password  # inputs username    br.submit_form(login_fields)  # submits the username and password    login_fields = br.get_form()  # This library does not run a certain programming language called javascript which displays more flashy elements on webpages, so this just detects the form again    br.submit_form(login_fields)  # Presses the second form    raw_data = str(br.parsed())  # puts returned junk into stuff the computer can read it    new_grades = collect_user_info(        raw_data) # runs the check string function(labeled def), which checks the strings for names of classes and grades    without_duplicates = []    for i in new_grades:        if i not in without_duplicates:            without_duplicates.append(i)    new_grades = without_duplicates    return new_grades# this collects the data belowdef collect_user_info(raw_data):    new_grades = []    seperated_classes = raw_data.split('<td align="left">')    for class_groups in seperated_classes:        selected_class = find_class(class_groups)        grade_location_in_string = class_groups.find('fg=Q1&amp')        if find_grade(class_groups, grade_location_in_string) != False:            selected_letter_grade, selected_number_grade = find_grade(class_groups, grade_location_in_string)            if duplicate_item(class_groups, selected_class) != True:                if selected_class.endswith('\xa0'):                    selected_class = selected_class[:-4]                new_class_info_set = [selected_class, selected_letter_grade, selected_number_grade]                new_grades.append(new_class_info_set)    return new_grades#this finds the classes in the stringdef find_class(selected_class_string):    class_name = ''    placeholder = 0    while selected_class_string[placeholder] != '<':        class_name = class_name + selected_class_string[placeholder]        placeholder += 1    return class_name#this checks for duplicate itemsdef duplicate_item(selected_list, potential_new_item):    if selected_list != None:        for confirmed_items in selected_list:            if confirmed_items == potential_new_item:                return True        return False    else:        return False#this finds the grades in the stringdef find_grade(selected_grade_string, location_in_string):    grade_number = ''    grade_letter = ''    placeholder = location_in_string + 28    while selected_grade_string[placeholder] != '<':        grade_letter = grade_letter + selected_grade_string[placeholder]        placeholder += 1    placeholder += 5    while selected_grade_string[placeholder] != '<':        grade_number = grade_number + selected_grade_string[placeholder]        placeholder += 1    if grade_number.isnumeric() != True: #if the number grade is not a number it means no grade is in so the function returns false        return False    return grade_number, grade_letter