#this file goes through each user and checks to see if their grade has been updatedfrom twilio.rest import Clientimport pandas as pdimport hashlibimport scrapeimport ast# sends out texts and updates csv datadef check_each_grade():    users = pd.read_csv('users.csv', usecols=["First Name", "Last Name", "Phone Number", "ID", "Password", "Classes"])    for index, row in users.iterrows():        current_first_name = row['First Name']        current_phone_number = row['Phone Number']        current_username = row['ID']        current_password = row['Password']        new_grades = scrape.scrape(current_username, current_password)  # gets most currently updated grade for user        #hashes new grades and stores them in array called "hashed_class_array"        hashed_class_array = []        for i in new_grades:            name_of_class = i[0]            grade_in_class = i[1]            string_to_hash = name_of_class + grade_in_class            hashed_class = hashlib.sha1(string_to_hash.encode("UTF-8")).hexdigest()[:10]  # hashes score and class            hashed_class_array.append(hashed_class)        #iterates through new grades and compares them to new -> if grades change it append them to a list        classes_with_changed_grades = []        grades_on_file = ast.literal_eval(row[5]) #gets current hashed grades stored in csv        class_index = 0        for this_class in hashed_class_array:            if(this_class != grades_on_file[class_index]):                classes_with_changed_grades.append(new_grades[class_index])                users.loc[index,'Classes'] = str(hashed_class_array)            class_index += 1        #forms message        if len(classes_with_changed_grades) > 0:            message = current_first_name + ', your grades have been updated: '            looking_at = 1            for class_notifications in classes_with_changed_grades:                if(looking_at == len(classes_with_changed_grades)):                    message = message + class_notifications[0] + ':' + class_notifications[1]                else:                    message = message + class_notifications[0] + ':' + class_notifications[1] + ' || '                looking_at += 1            #sends the text through            account_sid = '###########'            auth_token = '############'            client = Client(account_sid, auth_token)            client.messages.create(                                    body= message,                                    from_='###############',                                    to= current_phone_number)    users.to_csv('users.csv', index=False, header=True) # saves information back to csvcheck_each_grade()