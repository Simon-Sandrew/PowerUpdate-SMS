## This file serves to hold several developer functions that add functionality and speed up activities on the raspberry pifrom twilio.rest import Clientimport pandas as pdimport hashlibimport scrapeimport csv## NOTE THIS FUNCTION WILL RESET ALL OF THE USERS DATA -> ONLY RESEND FUNCTIONdef reset_csv(_csv):    with open(_csv, 'w', newline='') as file:        writer = csv.writer(file)        writer.writerow(["First Name", "Last Name", "Phone Number", "ID", "Password", "Classes"]) #-> this line is only used to create the table with the column titles        #ad.add_user('Owen', 'Dolan','2037674296', 'od1001020', 'Cuttyhunk5ofus')        #ad.add_user('Simon', 'Sandrew','12032248444', 'ss1001105', 'Apoll0111')# THIS FUNCTION UPDATES THE REDUDANT FILE BY TAKING ALL THE CURRENT USERS AND PUTTING THEM THERE ---> THIS OVERIDES THE CURRENT BACK UPdef transfer_to_redundant():    reset_csv('users_redundant.csv')    users = pd.read_csv('users.csv', usecols=["First Name", "Last Name", "Phone Number", "ID", "Password", "Classes"])    users.to_csv('users_redundant.csv', index=False, header=True)  # saves information back to csv## THIS FUNCTION TAKES THE REDUDANT LIST OF USERS INFO AND PUTS IT INTO THE USERS FILE AND UPDATES THEIR GRADES WITHOUT TEXTING THEMdef transfer_redundant_to_official():    reset_csv("users.csv")    users_current = pd.read_csv('users.csv', usecols=["First Name", "Last Name", "Phone Number", "ID", "Password", "Classes"])    users_redundant = pd.read_csv('users_redundant.csv', usecols=["First Name", "Last Name", "Phone Number", "ID", "Password", "Classes"])    for index, row in users_redundant.iterrows():        new_grades = scrape.scrape(row['ID'], row['Password'])        hashed_grades = []        for i in new_grades:            name_of_class = i[0]            grade_in_class = i[1]            string_to_hash = name_of_class + grade_in_class            hashed_class = hashlib.sha1(string_to_hash.encode("UTF-8")).hexdigest()[:10]  # hashes score and class            hashed_grades.append(hashed_class)        users_current.loc[index] = [row['First Name'], row['Last Name'], row['Phone Number'], row['ID'], row['Password'], str(hashed_grades)]    users_current.to_csv('users.csv', index=False, header=True)  # saves information back to csv# FUNCTION SENDS A TEXT MESSAGE TO AL USERSdef send_message_to_all(message):    users = pd.read_csv('users.csv', usecols=["First Name", "Last Name", "Phone Number", "ID", "Password", "Classes"])    for index, row in users.iterrows():        # sends the text through        account_sid = '########'        auth_token = '############'        client = Client(account_sid, auth_token)        client.messages.create(            body=message,            from_='#############',            to= row['Phone Number'])